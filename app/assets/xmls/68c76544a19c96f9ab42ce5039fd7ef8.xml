<?xml version="1.0" encoding="UTF-8"?>
<document>
<type>mainstream</type>
<forum>http://www.theregister.co.uk/headlines.atom</forum>
<forum_title>The Register</forum_title>
<discussion_title>ARM pumps 2,048-bit vector muscles in training for Fujitsu&apos;s Post-K ARMv8-A super</discussion_title>
<language>english</language>
<gmt_offset></gmt_offset>
<topic_url>http://www.theregister.co.uk/2016/08/22/armv8_scalable_vectors/</topic_url>
<topic_text>
Hot Chips ARM is bolting extra data-crunching engines onto its 64-bit ARMv8-A architecture to get it ready for Fujitsu&apos;s Post-K exascale supercomputer.
Specifically, ARM is adding a Scalable Vector Extension (SVE) to its processor core architecture. SVE can handle vectors from 128 to 2048 bits in length. This is not part of NEON, which is ARM&apos;s stock SIMD vector processing unit; we&apos;re told SVE will be separate.
Processors featuring 64-bit ARMv8-A cores with SVE will power Fujitsu&apos;s Post-K machine , which is due to go live in 2020 and crunch roughly 1,000 peta-FLOPS or a billion floating-point math calculations a second. It is set to be the world&apos;s fastest known supercomputer by the time it&apos;s fully switched on, and, surprisingly, it will be powered by ARM, which is the architecture in the brains of most smartphones, tablets, portable gadgets, embedded systems and so on.
SVE is an SIMD feature: it allows the CPU to run calculations on whole arrays of data from one instruction. Its sister NEON works on 64 and 128-bit long vectors. For example, the NEON instruction...
vadd.i32 q1, q2, q3 
...adds four 32-bit integer elements in the 128-bit register q2 to the corresponding four elements in 128-bit register q3 and stores the resulting array in q1. It&apos;s the equivalent of doing in C...
for(i = 0; i &lt; 4; i++) a[i] = b[i] + c[i]; 
...where q2 stores the array b[] and q3 stores c[]. This can be used to, say, increase the brightness of an image, by running through the pixels in 128-bit blocks and increasing their value. NEON has all sorts of other tricks up its sleeve, such as rearranging the elements in a vector to, say, split the left and right audio channels from a data stream. It&apos;s designed for rapid multimedia processing, which you&apos;d expect in phones, displays and other gizmos.
SVE works a similar fashion in that it operates on multiple arrays of data at once, processing up to 2,048 bits per vector per instruction.
To get ARMv8-A ready for high-performance computing, ARM developed SVE so its CPU cores can handle supercomputer workloads where you definitely don&apos;t want to be shuttling through data 128 bits at a time – you want processing done in the largest possible blocks.
ARM is a few weeks away from submitting patches to the GCC and LLVM teams to support auto-vectorization with SVE, which means that software built by these open-source compilers can automatically generate instructions that take advantage of long vectors without developers having to customize their apps.
Fujitsu&apos;s Post-K beast will replace the K Computer, a 10.5-PFLOPS 12MW goliath that&apos;s built out of 705,000 Sparc64 VIIIfx processors and is the world&apos;s fifth fastest known supercomputer. The dream is to be able to recompile scientific applications written for the K and other supers to run on the ARMv8-A-with-SVE Post-K and allow the auto-vectorization to harness the benefits of the long vectors without lots of manual optimization.
ARM staff are due to reveal more technical and performance details of SVE at the Hot Chips 2016 conference in Cupertino, California, today. We&apos;ll be there to get the latest info and fill you in. ®
 
</topic_text>
<spam_score>0.00</spam_score>
<post_num>2</post_num>
<post_id>post-2</post_id>
<post_url>http://www.theregister.co.uk/2016/08/22/armv8_scalable_vectors/</post_url>
<post_date>20160822</post_date>
<post_time></post_time>
<username>John Smith 19</username>
<post>
1000 Petaflops = 1 billion ? I think you&apos;ll find that&apos;s 1 x 10^18, which is a billion billion FLOPS
As for 2048 bits? this thing will variable length number formats like the ICL DAP?
Does sound impressive though.
</post>
<signature>

</signature>
<external_links>

</external_links>
<country>GB</country>
<main_image>https://regmedia.co.uk/2016/08/22/arm_assembly.png?x=1200&amp;y=794</main_image>
</document>
